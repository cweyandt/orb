// returns hisGrid with 4 enum states: offOccupied, offVacant, onOccupied, onVacant

(ahuHis: null, occGrid: null) => do

  ahuHis = if (ahuHis==null) hisReadAhuStatusXq(@p:lbnl:r:26693dbc-af6f1a61, pastWeek()) else ahuHis
  occGrid = if (occGrid==null) hisRead(@p:devSBL:r:2885a3d4-35e7ceea, pastWeek()) else occGrid

  // Find periods of overventilation and underventilation
  xor: [ahuHis.hisFindPeriods(x=>x), occGrid.hisFindPeriods(x=>x)].hisPeriodMatrix() //.findAll(v => v->numTrue==1)

  xor = xor.addCol("state") r => do
    if (r->v0 and r->v1) "onOccupied"
    else if (r->v0 and not r->v1) "onVacant"
    else if (not r->v0 and r->v1) "offOccupied"
    else "offVacant"
    end

  ahuStateHis: xor.removeCols(["dur","numTrue","v0","v1"]).renameCol("state","v0")

  // Calculate periods when AHU is on and building is vacant
  onVacantSum: xor.findAll(r => r->v1).colToList("dur").fold(sum)
  // Calculate periods when AHU is off and building is occupied
  offOccupiedSum: xor.findAll(r => r->v0).colToList("dur").fold(sum)

  ahuStateHis = ahuStateHis.addMeta({onVacantSum: onVacantSum, offOccupiedSum: offOccupiedSum})

  return ahuStateHis

end
