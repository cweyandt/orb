/*------------------------------------------------------------------------------
  Copyright 2021 Chris Weyandt

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.
------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------
  Run changepoint detection algorithm for a given orbTest record. The algorithm
  requires a full day of wifi connection data to provide accurate results, so
  the default time range is
    start:   the day after the test record's current hisEnd
    end:     yesterday()

  Arguments:
  orbTest         orbTest record (rec or ref)
  startDate       Optional: date to begin calculations, overwrites existing data

  Parameters from orbTest:
    buildingRef:       siteRef of building for analysis
    ahuRefs:           ahuRef[] of AHU's to include in the test
    floorRefs:         floorRef[] floors withing building to include in test
    searchMethod:      Str indicating CPD search method
    searchModel:       Str indicating CPD search model
    dailyThreshold:    Number indicating target AUC percentage per individual day
    overallThreshold:  Number indicating target AUC percentage for daily average

------------------------------------------------------------------------------*/


(orbTest: @p:devSBL:r:2885a3d4-35e7ceea, span) => do

  // Convert ref to rec if necessary
  if (isRef(orbTest)) orbTest=readById(orbTest)

  // Confirm orbTestRec points to an ORB Test Record, otherwise exit
  if (orbTest.missing("orbTest"))
    return {error: "No corresponding Test configuration found"}.toGrid()

  if (orbTest.missing("searchMethod"))
    return {error: "Missing searchMethod parameter on test record"}.toGrid()


  // Determine span to update
  if (span==null)
    span = toDateSpan((today()-8day)..(today()-1day))


  // Get building dis
  try building: xReadById(orbTest->buildingRef)->dis
  catch (ex) return {error: "Error determining building dis",
                     catch: ex }.toGrid()

  // Gather list of floor numbers to include in the query
  try floorList: orbTest->floorRefs.map(ref => xReadById(ref)->floorNum)
  catch (ex) return {error: "Error finding floors in building",
                     catch: ex }.toGrid()

  // Collect points for analysis
  wifiApGrid: readAll(hisEnd and wifiApBuilding==building and not disabled)
              .findAll(r => do
                floor: r->wifiApFloor
                if (isStr(floor)) floor = floor.parseNumber
                floorList.contains(floor)
              end)

  // Aggregate points to a single timeseries
  wifiData: wifiApGrid.hisRead(span, {limit:null})
                   .hisFoldCols(sum)
                   //.hisRollup(max,rollup)
                   .addColMeta("v0",  { "chartGroup":"g0",
                                        "chartType": "line",
                                        "strokeWidth":2,
                                        "dis": "B" + building + " WiFi Connections"
                                        })

  try do
    search: orbTest->searchMethod
    model: orbTest->searchModel
  catch (ex) return {error: "Invalid searchMethod or searchModel",
                     catch: ex }.toGrid()

  // Prepare query
  uri: """http://fmcs-svc-mgr.lbl.gov/api/v1/"""
  method: "POST"
  path: if (search=="ORBanalyzer") """analyze""" else ( """models""" + "/")
  headers: {"Content-Type": "application/json"}
  endpoint: "/json"

  // Determine correct parameters for endpoint
  params: "?"
  if (search=="binseg")
    try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr()])
    catch (ex)  return {error: "Invalid model parameters in orbTest record",
                        requires: "breakpoints",
                        catch: ex }.toGrid()

  else if (search=="window")
    try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr() +
                                "&width=" + orbTest->width.toStr()])
    catch (ex)  return {error: "Invalid model parameters in orbTest record",
                        requires: "breakpoints, width",
                        catch: ex }.toGrid()

  else if (search=="dynamic")
    try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr() +
                                "&min_size=" + orbTest->minSize.toStr() +
                                "&jump=" + orbTest->step.toStr()])
    catch (ex)  return {error: "Invalid model parameters in orbTest record",
                        requires: "breakpoints, width",
                        catch: ex }.toGrid()

  else if (search=="bottom_up")
    try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr() +
                                "&min_size=" + orbTest->minSize.toStr() +
                                "&jump=" + orbTest->step.toStr()])
    catch (ex)  return {error: "Invalid model parameters in orbTest record",
                        requires: "breakpoints, minSize, jump",
                        catch: ex }.toGrid()

  else if (search=="kernel")
    if (model=="linear")
      try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr() +
                                  "&kernel=\"linear\"" +
                                  "&min_size=" + orbTest->minSize.toStr() +
                                  "&jump=" + orbTest->step.toStr()])
      catch (ex)  return {error: "Invalid model parameters in orbTest record",
                          requires: "kernel, minSize, jump",
                          catch: ex }.toGrid()

    else
      try params = concat([params,"breakpoints=" + orbTest->breakpoints.toStr() +
                                  "&kernel=\"rbf\"" +
                                  "&min_size=" + orbTest->minSize.toStr() +
                                  "&jump=" + orbTest->step.toStr()])
      catch (ex)  return {error: "Invalid model parameters in orbTest record",
                          requires: "minSize, jump",
                          catch: ex }.toGrid()

  else if (search=="ORBanalyzer") do
      try params = concat([params,"dailyThreshold=" + orbTest->dailyThreshold.toStr() +
                                  "&overallThreshold=" + orbTest->overallThreshold.toStr()])
      catch (ex)  return {error: "Invalid model parameters in orbTest record",
                          requires: "dailyThreshold, overallThreshold",
                          catch: ex }.toGrid()
  else
    params = {}

  // Compile query string
  query: ""
  if (search=="ORBanalyzer") do
    query = uri + path + endpoint + params
  else
    query = uri + path + search + "/" + model + endpoint + params

  raw: null
  res: null

  // -- Execute query with dcHttpExt --
  raw = dcHttp(``+query, headers, wifiData.ioWriteJson(""), method)

  // Parse results to hisGrid
  try res = raw.ioReadJson()
               .toGrid()
               .addColMeta("v0", { "dis":"0RB Occupancy Estimate",
                                   "chartGroup":"g1"})
  catch (ex) return {error: "Error reading results from API",
                     catch: ex,
                     response: raw }.toGrid()

  // Parse result values to boolean
  try res = res.hisMap(v => v.parseBool())
  catch (ex) return {error: "Error parsing results using parseBool",
                     catch: ex }.toGrid()

  // Write history to orbTest point
  try res.hisWrite(orbTest)
  catch (ex) return {error: "Error writing results to orbTest his",
                     catch: ex }.toGrid()

  return res.size

end


/*------------------------------------------------------------------------------
  Updates
  2021-01-11  Raphael Vitti
    Moved from skyspark.lbl.gov.
------------------------------------------------------------------------------*/
