(siteRef: null, span: pastWeek(), stacked: false) => do

  // Get building dis
  try do
    building: xq().xqReadByIds([siteRef]).xqExecute.first->dis
  catch (ex) do
    return ex
  end

  // Collect points for display


  // pts = pts.map(r => r.set("wifiApFloor", r["wifiApFloor"].parseInt))

  // Create list of floors within the given building
  floors: readAll(point and hisEnd and wifiApBuilding==building and not disabled)
             .unique("wifiApFloor")
             .colToList("wifiApFloor")
             .sort((a,b) => a <=> b)

  floorSums: []
  group: 0

  floors.each f => do
    if (not stacked) group = f
    pts: readAll(hisEnd and wifiApBuilding==building and wifiApFloor==f and not disabled)
    data: pts.hisRead(span, {limit:null})
             .hisFoldCols(sum)
             .addColMeta("v0",  { "chartGroup":"g" + group,
                                  "chartType": "stackedBar",
                                  "dis": "Floor " + f
                                  })

    floorSums = floorSums.add(data)
  end

  hisGrid: floorSums.hisJoin()
                    .addMeta({title: "Wifi Connections by Floor in B" + building})


  /*
  hisGrid.colNames()[1..-1].each colName => do
    hisGrid = hisGrid.addColMeta(colName, {chartGroup: data.col(colName).meta->locationRef->dis})
  end
  */

  return hisGrid

end

/*
x,y,chartType,chartGroup,dis,color,title
"ts","v0","stackedBar","g0","Floor1","#3498db","Wifi Connections By Floor"
"ts","v1","stackedBar","g0","v1","#e74c3c",
"ts","v2","stackedBar","g0","v2","#27ae60",
"ts","v3","stackedBar","g0","v3","#9b59b6",
"ts","v4","stackedBar","g0","v4","#f39c12",
"ts","v5","stackedBar","g0","v5","#16a085",
*/
