/*
  Copyright 2021 Chris Weyandt

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.
*/
/*
  Queries influxDB for a list of all wifi access points, checks to see
  if a point already exists for the given AP, and creates a new point
  if necessary.

  Arguments:
  connRef     ref to record containing influxdb connection info
*/

(connRef: @p:devSBL:r:288077be-7e22d3b4) => do

  method: "GET"
  // headers: {"Accept": "application/json"}
  headers: {"Accept": "application/csv"}
  // headers: null
  uri: connRef->uri
  db: connRef->influxDatabase
  user: connRef->influxUsername
  query: "SHOW TAG VALUES WITH KEY = \"ap_name\""
  body: null

  influxQL_uri: [uri, """?db=""", db, """&q=""", query].concat

  try do
    afHttpAuth("basic", user, connRef)
    // -- Execute with afHttpExt --
    afHttpRequest(method, ``+influxQL_uri, headers, body)
    // afHttpRequest(method, ``+uri, headers, body)

  catch (err) do
        // perpetuate all other errors
        afHttpResponse({safeNames})
        throw err
  end

  res: afHttpResponse({safeNames})

  wifi_aps: res->body.ioReadCsv().colToList("value").unique()

  // return wifi_aps

  re: r"ap\d{3}-(\w{1,5})-(\w+)-\w+"
  reFloor: r"^\d"
  // Clean up and format grid
  apGrid: wifi_aps.toGrid()
                  .addCol("building", (r=>reGroups(re, r["val"])[1]))
                  .addCol("location", (r=>reGroups(re, r["val"])[2]))
                  .addCol("floor", (r=>reFind(reFloor, r["location"])))
                  .addCol("wifiAp", (r=>r["val"]))

  newApCount: 0
  updatedApCount: 0

  // return apGrid

  // cycle through each AP from the API query
  apGrid.each s => do
    // Check to see if the station is already mapped to an equip
    if (readAll(wifiApName == (s["wifiAp"])).isEmpty) do // Remove if updating
      // If not existing, then prepare new point dict
      ptDict: {
        point, his, sensor, wifiAp,
        wifiApName: s["wifiAp"],
        wifiApBuilding: s["building"],
        wifiApLocation: s["location"],
        disMacro: "B\$wifiApBuilding Floor \$wifiApFloor WiFi: \$wifiApLocation",
        siteRef: @p:devSBL:r:2880b80c-4ce38f16,
        kind: "Number",
        equipRef: @p:devSBL:r:2880b862-33bfb816,
        }
      ptDict = ptDict.set("tz", ptDict->equipRef->siteRef->tz)
      if (s.has("floor")) do
        ptDict = ptDict.set("wifiApFloor", s["floor"].parseInt)
      else do
        ptDict = ptDict.set("wifiApFloor", 0)
      end

      // Commit new if it doesn't exist
      exRec: read(point and wifiApName==s["wifiAp"], false)
      if (exRec==null) do
        newApCount = newApCount + 1
        commit(diff(exRec, ptDict, if (exRec==null) {add}))
      end else do
        updatedApCount = updatedApCount + 1
        commit(diff(exRec, ptDict))
      end
    end
  end

  return {"newRecords": newApCount, "modifiedRecords": updatedApCount}

end

/*------------------------------------------------------------------------------
  Updates
  2021-07-13  Chris Weyandt
    Created.
------------------------------------------------------------------------------*/
